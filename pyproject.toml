[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "HD_BET"
authors = [
  { name = "Fabian Isensee", email = "f.isensee@dkfz.de" },
]
description = "Tool for brain extraction"
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.5"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
  "numpy",
  "torch>=0.4.1",
  "scikit-image",
  "SimpleITK",
]

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
  "pre-commit",
]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

[project.urls]
Homepage = "https://github.com/MIC-DKFZ/HD_BET"
"Bug Tracker" = "https://github.com/MIC-DKFZ/HD_BET/issues"
Discussions = "https://github.com/MIC-DKFZ/HD_BET/discussions"
Changelog = "https://github.com/MIC-DKFZ/HD_BET/releases"

[project.scripts]
hd-bet = "hd_bet.hd_bet_cli:main"

[tool.hatch]
version.path = "src/hd_bet/__init__.py"

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["hd_bet"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "EXE002",   # The file is executable but no shebang is present
  "PTH118", # `os.path.join()` should be replaced by `Path` with `/` operator
  "SIM108", # Use ternary operator `l = os.path.join if join else lambda x, y: y` instead of `if`-`else`-block
  "E741", # Ambiguous variable name: `l`
  "E731", # Do not assign a `lambda` expression, use a `def`
  "EM101", # Exception must not use a string literal, assign to variable first
  "ARG005", # Unused lambda argument: `x`
  "RUF005", # Consider `[1, *list(new_shp)]` instead of concatenation
  "ARG005", # Unused lambda argument: `loc`
  "B008", # Do not perform function call `os.path.join` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
  "PTH113", # `os.path.isfile()` should be replaced by `Path.is_file()`
  "RET505", # Unnecessary `else` after `return` statement
  "PTH120", # `os.path.dirname()` should be replaced by `Path.parent`
  "F841", # Local variable `params_file` is assigned to but never used
  "PTH112", # `os.path.isdir()` should be replaced by `Path.is_dir()`
  "PTH118", # `os.path.join()` should be replaced by `Path.joinpath()`
  "PTH102", # `os.mkdir()` should be replaced by `Path.mkdir()`
  "C414", # Unnecessary `list` call within `tuple()`
  "PTH123", # `open()` should be replaced by `Path.open()`
  "PTH111", # `os.path.expanduser()` should be replaced by `Path.expanduser()`
  "RET504", # Unnecessary assignment to `x` before `return` statement
  "UP008", # Use `super()` instead of `super(__class__, self)`
  "PTH119", # `os.path.basename()` should be replaced by `Path.name`
  "C419", # Unnecessary list comprehension
  "SIM108", # Use ternary operator `x = 8 if do_mirroring else 1` instead of `if`-`else`-block
  "T201", # `print` found
  "B007", # Loop control variable `i` not used within loop body
  "PTH100", # `os.path.abspath()` should be replaced by `Path.resolve()`
  "PTH107", # `os.remove()` should be replaced by `Path.unlink()`
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["hd_bet._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
  "missing-class-docstring",
  "invalid-name",
  "import-error",
  "consider-using-f-string",
  "consider-using-with",
  "unnecessary-lambda-assignment",
  "super-with-arguments",
  "arguments-renamed",
  "attribute-defined-outside-init",
  "no-member",
  "deprecated-module",
  "no-else-return",
  "use-a-generator",
  "consider-using-enumerate",
  "superfluous-parens",
  "unused-variable",
  "import-outside-toplevel",
]
